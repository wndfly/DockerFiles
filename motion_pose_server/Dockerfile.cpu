FROM ubuntu:20.04

MAINTAINER <wangming@motiontek.cn>

WORKDIR /

# # Configure timezone and locale
# RUN echo "Aisa/Shanghai" > /etc/timezone && \
#     dpkg-reconfigure -f noninteractive tzdata && \
#     sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
#     echo 'LANG="en_US.UTF-8"'>/etc/default/locale && \
#     dpkg-reconfigure --frontend=noninteractive locales && \
#     update-locale LANG=en_US.UTF-8

RUN apt update && apt upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends unzip wget curl git g++ gcc \
    ca-certificates build-essential ffmpeg locales libgdiplus \
    libopencv-core-dev libopencv-highgui-dev libopencv-imgproc-dev \
    libopencv-video-dev libopencv-calib3d-dev libopencv-features2d-dev \
    pkg-config libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
    libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
    netbase autoconf automake bzip2 dpkg-dev file imagemagick libbz2-dev libc6-dev \
    libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev libglib2.0-dev \
    libgmp-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev \
    libmaxminddb-dev libncurses5-dev libncursesw5-dev libpq-dev libreadline-dev \
    libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev make \
    patch xz-utils zlib1g-dev libbluetooth-dev tk-dev uuid-dev libopus-dev libopus0 opus-tools \
    apt-transport-https gnupg dirmngr zip yasm libvpx-dev libass-dev libfreetype6-dev \
    openexr libgnutls28-dev libmp3lame-dev libvorbis-dev texinfo \
    libunistring-dev libx265-dev libnuma-dev libfdk-aac-dev libmkl-full-dev \
    freeglut3 freeglut3-dev libxmu-dev libxi-dev libeigen3-dev libgoogle-glog-dev \
    libgflags-dev libatlas-base-dev libsuitesparse-dev libopencv-dev libatlas-base-dev libprotobuf-dev \
    libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libboost-all-dev liblmdb-dev && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

RUN mkdir /depends && cd /depends/ && \
    wget https://github.com/Kitware/CMake/releases/download/v3.24.2/cmake-3.24.2.tar.gz && \
    tar -xzf cmake-3.24.2.tar.gz && cd cmake-3.24.2/ && \
    ./configure && ./bootstrap && make -j`nproc` && make install -j`nproc` && cd / && rm -rf /depends

RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

# install python
ENV GPG_KEY=A035C8C19219BA821ECEA86B64E628F8D684696D
ENV PYTHON_VERSION=3.10.5
RUN wget -O python.tar.xz \
    "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" && \
    wget -O python.tar.xz.asc \
    "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" && \
    export GNUPGHOME="$(mktemp -d)" && \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GPG_KEY" && \
    gpg --batch --verify python.tar.xz.asc python.tar.xz && \
    { command -v gpgconf > /dev/null && gpgconf --kill all || :; } && \
    rm -rf "$GNUPGHOME" python.tar.xz.asc && mkdir -p /usr/src/python && \
    tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz && \
    rm python.tar.xz && cd /usr/src/python && \
    gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && \
    ./configure \
    --build="$gnuArch" \
    --enable-loadable-sqlite-extensions \
    --enable-optimizations \
    --enable-option-checking=fatal \
    --enable-shared \
    --with-lto \
    --with-system-expat \
    --with-system-ffi && \
    #--without-ensurepip && \
    make -j "$(nproc)" && make install && \
    rm -rf /usr/src/python && \
    ldconfig && python3 --version

RUN ln -s /usr/local/bin/idle3 /usr/bin/idle && \
    ln -s /usr/local/bin/pydoc3 /usr/bin/pydoc && \
    ln -s /usr/local/bin/python3 /usr/bin/python && \
    ln -s /usr/local/bin/python3-config /usr/bin/python-config && \
    python -m ensurepip --upgrade

ENV OPENCV_VERSION=4.6.0
ENV OPENCVSHARP_VERSION=4.6.0.20220608

RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && rm ${OPENCV_VERSION}.zip && \
    mv opencv-${OPENCV_VERSION} opencv && \
    wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && rm ${OPENCV_VERSION}.zip && \
    mv opencv_contrib-${OPENCV_VERSION} opencv_contrib && \
    cd opencv && mkdir build && cd build && \
    cmake -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \
    -D CMAKE_INSTALL_PREFIX=/opencv/install -D CMAKE_BUILD_TYPE=RELEASE \
    -D BUILD_SHARED_LIBS=ON -D ENABLE_CXX11=ON -D BUILD_EXAMPLES=OFF \
    -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF \
    -D BUILD_JAVA=OFF -D BUILD_opencv_app=OFF -D BUILD_opencv_barcode=ON \
    -D BUILD_opencv_java_bindings_generator=OFF \
    -D BUILD_opencv_js_bindings_generator=OFF \
    -D BUILD_opencv_python_bindings_generator=OFF \
    -D BUILD_opencv_python_tests=OFF -D BUILD_opencv_ts=OFF \
    -D BUILD_opencv_js=OFF -D BUILD_opencv_bioinspired=OFF \
    -D BUILD_opencv_ccalib=OFF -D BUILD_opencv_datasets=OFF \
    -D BUILD_opencv_dnn_objdetect=OFF -D BUILD_opencv_dpm=OFF \
    -D BUILD_opencv_fuzzy=OFF -D BUILD_opencv_gapi=OFF \
    -D BUILD_opencv_intensity_transform=OFF -D BUILD_opencv_mcc=OFF \
    -D BUILD_opencv_objc_bindings_generator=OFF -D BUILD_opencv_rapid=OFF \
    -D BUILD_opencv_reg=OFF -D BUILD_opencv_stereo=OFF \
    -D BUILD_opencv_structured_light=OFF -D BUILD_opencv_surface_matching=OFF \
    -D BUILD_opencv_videostab=OFF -D BUILD_opencv_wechat_qrcode=ON \
    -D WITH_GSTREAMER=OFF -D WITH_ADE=OFF -D BUILD_JPEG=ON -D BUILD_OPENEXR=ON \
    -D BUILD_OPENJPEG=ON -D BUILD_PACKAGE=ON -D BUILD_PNG=ON -D BUILD_USE_SYMLINKS=ON \
    -D BUILD_WEBP=ON -D BUILD_ZLIB=ON -D ENABLE_FAST_MATH=ON -D MKL_USE_SINGLE_DYNAMIC_LIBRARY=ON \
    -D WITH_FREETYPE=ON -D WITH_JPEG=ON -D WITH_OPENEXR=ON -D WITH_OPENJPEG=ON -D WITH_PNG=ON \
    -D WITH_PROTOBUF=ON -D OPENCV_ENABLE_NONFREE=ON -D WITH_EIGEN=ON -D WITH_FFMPEG=ON .. && \
    make -j$(nproc) && make install && ldconfig && cd / && \
    wget https://github.com/shimat/opencvsharp/archive/${OPENCVSHARP_VERSION}.zip && \
    unzip ${OPENCVSHARP_VERSION}.zip && rm ${OPENCVSHARP_VERSION}.zip && \
    mv opencvsharp-${OPENCVSHARP_VERSION} opencvsharp && \
    mkdir /opencvsharp/make && cd /opencvsharp/make && \
    cmake -D CMAKE_INSTALL_PREFIX=/opencvsharp/make \
    -D OpenCV_DIR=/opencv/install/lib/cmake/opencv4 /opencvsharp/src && \
    make -j$(nproc) && make install && rm -rf /opencv && rm -rf /opencv_contrib && \
    cp /opencvsharp/make/lib/libOpenCvSharpExtern.so /usr/lib/ && \
    rm -rf /opencvsharp

WORKDIR /app
COPY requirement_web_cpu.txt requirement.txt
RUN python -m pip install --upgrade pip && pip3 install -r requirement.txt

# openpose build begin
RUN python -m pip install --upgrade numpy opencv-python
ENV PYTHON_EXECUTABLE=/usr/local/bin/python3.10
ENV PYTHON_LIBRARY=/usr/local/lib/libpython3.10.so
RUN mkdir /dl && cd /dl && \
    wget https://github.com/CMU-Perceptual-Computing-Lab/openpose/archive/refs/tags/v1.7.0.tar.gz && \
    wget https://github.com/pybind/pybind11/archive/085a29436a8c472caaaf7157aa644b571079bcaa.zip && \
    wget https://github.com/CMU-Perceptual-Computing-Lab/caffe/archive/b5ede488952e40861e84e51a9f9fd8fe2395cc8a.zip &&\
    unzip 085a29436a8c472caaaf7157aa644b571079bcaa.zip && unzip b5ede488952e40861e84e51a9f9fd8fe2395cc8a.zip && \
    tar -xzf v1.7.0.tar.gz && mv openpose-1.7.0 /openpose && \
    rm -rf /openpose/3rdparty/caffe && rm -rf /openpose/3rdparty/pybind11 && \
    mv caffe-b5ede488952e40861e84e51a9f9fd8fe2395cc8a /openpose/3rdparty/caffe && \
    mv pybind11-085a29436a8c472caaaf7157aa644b571079bcaa /openpose/3rdparty/pybind11 && \
    cd /openpose/ && mkdir build && cd build && \
    cmake .. -D DOWNLOAD_BODY_25_MODEL=ON -D DOWNLOAD_BODY_COCO_MODEL=ON -D DOWNLOAD_BODY_MPI_MODEL=ON \
    -D DOWNLOAD_FACE_MODEL=ON -D DOWNLOAD_HAND_MODEL=ON -D BUILD_PYTHON=ON -D PYBIND11_INSTALL=ON \
    -D PYTHON_EXECUTABLE=$PYTHON_EXECUTABLE -D PYTHON_LIBRARY=$PYTHON_LIBRARY -D BUILD_CAFFE=ON \
    -D BUILD_EXAMPLES=ON -D BUILD_SHARED_LIBS=ON -D CMAKE_BUILD_TYPE=Release -D DL_FRAMEWORK=CAFFE \
    -D GPU_MODE=CPU_ONLY && make -j `nproc` && make install && mkdir /usr/local/python/openpose/models/ && \
    cd .. && cp -r models/face /usr/local/python/openpose/models/ && \
    cp -r models/hand /usr/local/python/openpose/models/ && cp -r models/pose /usr/local/python/openpose/models/ && \
    rm /dl && rm /openpose
# openpose build end

#RUN python -c 'import mediapipe as mp; mp.solutions.pose._download_oss_pose_landmark_model(2); mp.solutions.pose._download_oss_pose_landmark_model(0)'

COPY mp_old_model/* /usr/local/lib/python3.10/site-packages/mediapipe/modules/pose_landmark/
RUN unlink /etc/localtime && ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
#RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

EXPOSE 8080/tcp

ENV FLASK_DEBUG=0
ENV FLASK_APP=web
ENV FLASK_ENV=production
ENV LC_ALL=en_US.UTF-8
ENV LANG=en_US.UTF-8


CMD ["bash", "start_prod.sh"]
